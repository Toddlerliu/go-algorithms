package list

import (
	"fmt"
	"testing"
)

func TestDoublyLinkedList(t *testing.T) {
	list := NewDoublyLinkedList()
	i, isexist := list.Contains(1)
	fmt.Println("empty ?", list.IsEmpty())
	fmt.Println("contain 1 ?", i, isexist)
	fmt.Println("length:", list.size)
	list.Add("a")
	list.Add("b")
	list.Add("c")
	fmt.Println("list:", list.GetAll())
	fmt.Println("length:", list.size)
	list.AddAll([]interface{}{1, 2, 3})
	fmt.Println("length:", list.size)
	fmt.Println("add all 1 2 3:", list.GetAll())
	i2, isexist2 := list.Contains(2)
	fmt.Println("contain 2 ?", i2, isexist2)
	fmt.Println("empty ?", list.IsEmpty())
	fmt.Println("index c :", list.IndexOf("c"))
	list.AddFirst("y")
	fmt.Println("addFirst y :", list.GetAll())
	list.Insert(1, "z")
	fmt.Println("insert 1 z :", list.GetAll())
	list.Insert(2, "x")
	fmt.Println("insert 2 x :", list.GetAll())
	list.InsertAll(4, []interface{}{"key", 6, 8, "value"})
	fmt.Println("insert all :", list.GetAll())
	list.Set(4, "kkk")
	fmt.Println("set index 4 value kkk :", list.GetAll())
	fmt.Println("first is:", list.GetFirst().data)
	fmt.Println("last is:", list.GetLast().data)
	fmt.Println("index 6 is:", list.GetByIndex(6))
	fmt.Println("remove value 8", list.RemoveData(8))
	fmt.Println("remove first:", list.RemoveFirst())
	fmt.Println("remove last:", list.RemoveLast())
	fmt.Println("all :", list.GetAll())
	list.RemoveAll([]interface{}{"key", "kkk", "value", 1, 2})
	fmt.Println("all :", list.GetAll())
	list.RemoveByIndex(3)
	fmt.Println("all :", list.GetAll())
	fmt.Println("queue peek:", list.QueuePeek())
	fmt.Println("all :", list.GetAll())
	fmt.Println("queue poll:", list.Poll())
	fmt.Println("all :", list.GetAll())
	fmt.Println("stack peek:", list.StackPeek())
	fmt.Println("all :", list.GetAll())
	fmt.Println("stack pop:", list.Pop())
	fmt.Println("all :", list.GetAll())
	list.Clear()
	fmt.Println("clear :", list.GetAll())
	fmt.Println("size:", list.size)
	fmt.Println("empty:", list.IsEmpty())
}
